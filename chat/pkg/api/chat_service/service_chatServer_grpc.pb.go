// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/chat_service/service_chatServer.proto

package chat_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatApi_Create_FullMethodName      = "/chat.protobuf.api.chat_service.ChatApi/Create"
	ChatApi_Delete_FullMethodName      = "/chat.protobuf.api.chat_service.ChatApi/Delete"
	ChatApi_SendMessage_FullMethodName = "/chat.protobuf.api.chat_service.ChatApi/SendMessage"
)

// ChatApiClient is the client API for ChatApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatApiClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendMessageRequest, wrapperspb.StringValue], error)
}

type chatApiClient struct {
	cc grpc.ClientConnInterface
}

func NewChatApiClient(cc grpc.ClientConnInterface) ChatApiClient {
	return &chatApiClient{cc}
}

func (c *chatApiClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ChatApi_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatApiClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatApi_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatApiClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendMessageRequest, wrapperspb.StringValue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatApi_ServiceDesc.Streams[0], ChatApi_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, wrapperspb.StringValue]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatApi_SendMessageClient = grpc.ClientStreamingClient[SendMessageRequest, wrapperspb.StringValue]

// ChatApiServer is the server API for ChatApi service.
// All implementations must embed UnimplementedChatApiServer
// for forward compatibility.
type ChatApiServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	SendMessage(grpc.ClientStreamingServer[SendMessageRequest, wrapperspb.StringValue]) error
	mustEmbedUnimplementedChatApiServer()
}

// UnimplementedChatApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatApiServer struct{}

func (UnimplementedChatApiServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChatApiServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatApiServer) SendMessage(grpc.ClientStreamingServer[SendMessageRequest, wrapperspb.StringValue]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatApiServer) mustEmbedUnimplementedChatApiServer() {}
func (UnimplementedChatApiServer) testEmbeddedByValue()                 {}

// UnsafeChatApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatApiServer will
// result in compilation errors.
type UnsafeChatApiServer interface {
	mustEmbedUnimplementedChatApiServer()
}

func RegisterChatApiServer(s grpc.ServiceRegistrar, srv ChatApiServer) {
	// If the following call pancis, it indicates UnimplementedChatApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatApi_ServiceDesc, srv)
}

func _ChatApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatApi_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatApi_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApi_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatApiServer).SendMessage(&grpc.GenericServerStream[SendMessageRequest, wrapperspb.StringValue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatApi_SendMessageServer = grpc.ClientStreamingServer[SendMessageRequest, wrapperspb.StringValue]

// ChatApi_ServiceDesc is the grpc.ServiceDesc for ChatApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.protobuf.api.chat_service.ChatApi",
	HandlerType: (*ChatApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChatApi_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatApi_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _ChatApi_SendMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/chat_service/service_chatServer.proto",
}
